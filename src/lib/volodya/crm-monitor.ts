// Rundex CRM - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –í–æ–ª–æ–¥–∏
// –ê–≤—Ç–æ—Ä: MagistrTheOne, 2025

import { SberAdapter } from './sberAdapter'
import { ContextManager } from './contextManager'

interface CrmChange {
  id: string
  type: 'lead_created' | 'lead_updated' | 'deal_created' | 'deal_updated' | 'task_created' | 'task_completed' | 'contact_added'
  entityId: string
  description: string
  timestamp: number
  userId?: string
  severity: 'low' | 'medium' | 'high' | 'critical'
}

interface MonitoringReport {
  period: {
    start: number
    end: number
  }
  changes: CrmChange[]
  summary: {
    totalChanges: number
    criticalIssues: number
    recommendations: string[]
    sarcasticComments: string[]
  }
  insights: {
    productivityScore: number
    riskLevel: 'low' | 'medium' | 'high'
    opportunities: string[]
  }
}

class CrmMonitor {
  private changes: CrmChange[] = []
  private readonly MONITORING_INTERVAL = 60 * 60 * 1000 // 1 —á–∞—Å
  private readonly MAX_CHANGES = 1000

  constructor() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    setInterval(() => this.generateReport(), this.MONITORING_INTERVAL)
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CRM
   */
  logChange(change: Omit<CrmChange, 'id' | 'timestamp'>): void {
    const newChange: CrmChange = {
      ...change,
      id: crypto.randomUUID(),
      timestamp: Date.now()
    }

    this.changes.push(newChange)

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (this.changes.length > this.MAX_CHANGES) {
      this.changes = this.changes.slice(-this.MAX_CHANGES)
    }

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (change.severity === 'critical') {
      this.reactToCriticalChange(newChange)
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
   */
  async generateReport(hours: number = 24): Promise<MonitoringReport> {
    const now = Date.now()
    const startTime = now - (hours * 60 * 60 * 1000)

    const relevantChanges = this.changes.filter(change => change.timestamp >= startTime)

    // –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const summary = this.analyzeChanges(relevantChanges)
    const insights = await this.generateInsights(relevantChanges)

    const report: MonitoringReport = {
      period: { start: startTime, end: now },
      changes: relevantChanges,
      summary,
      insights
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await this.generateNotifications(report)

    return report
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  private analyzeChanges(changes: CrmChange[]) {
    const totalChanges = changes.length
    const criticalIssues = changes.filter(c => c.severity === 'critical').length

    const recommendations: string[] = []
    const sarcasticComments: string[] = []

    // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const changeTypes = changes.reduce((acc, change) => {
      acc[change.type] = (acc[change.type] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if (changeTypes.lead_created && changeTypes.lead_created > 20) {
      recommendations.push("–ë–æ–ª—å—à–æ–π –ø—Ä–∏—Ç–æ–∫ –ª–∏–¥–æ–≤! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø–µ—Ä–≤–∏—á–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
      sarcasticComments.push("–û–≥–æ, –ª–∏–¥—ã —Å—ã–ø—è—Ç—Å—è –∫–∞–∫ –∏–∑ —Ä–æ–≥–∞ –∏–∑–æ–±–∏–ª–∏—è! –í—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö –≤—Å–µ, –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è?")
    }

    if (criticalIssues > 0) {
      recommendations.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${criticalIssues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è.`)
      sarcasticComments.push("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–Ω–æ–∂–∞—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –∫—Ä–æ–ª–∏–∫–æ–≤. –ú–æ–∂–µ—Ç –ø–æ—Ä–∞ —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å?")
    }

    if (changeTypes.task_completed && changeTypes.task_completed < changeTypes.task_created) {
      const overdueTasks = (changeTypes.task_created || 0) - (changeTypes.task_completed || 0)
      recommendations.push(`–£ –≤–∞—Å ${overdueTasks} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.`)
      sarcasticComments.push(`${overdueTasks} –∑–∞–¥–∞—á –≤–∏—Å—è—Ç –≤ –≤–æ–∑–¥—É—Ö–µ. –û–Ω–∏ —Å–∞–º–∏ —Å–µ–±—è –≤—ã–ø–æ–ª–Ω—è—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º?`)
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const hourDistribution = changes.reduce((acc, change) => {
      const hour = new Date(change.timestamp).getHours()
      acc[hour] = (acc[hour] || 0) + 1
      return acc
    }, {} as Record<number, number>)

    const peakHour = Object.keys(hourDistribution).reduce((a, b) =>
      hourDistribution[Number(a)] > hourDistribution[Number(b)] ? a : b
    )

    if (peakHour) {
      recommendations.push(`–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ ${peakHour}:00. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —ç—Ç–æ –≤—Ä–µ–º—è.`)
    }

    return {
      totalChanges,
      criticalIssues,
      recommendations,
      sarcasticComments
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  private async generateInsights(changes: CrmChange[]): Promise<MonitoringReport['insights']> {
    let productivityScore = 85 // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    const completedTasks = changes.filter(c => c.type === 'task_completed').length
    const createdTasks = changes.filter(c => c.type === 'task_created').length

    if (createdTasks > 0) {
      productivityScore = Math.min(100, (completedTasks / createdTasks) * 100)
    }

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
    let riskLevel: 'low' | 'medium' | 'high' = 'low'
    const criticalCount = changes.filter(c => c.severity === 'critical').length
    const overdueTasks = createdTasks - completedTasks

    if (criticalCount > 5 || overdueTasks > 10) {
      riskLevel = 'high'
    } else if (criticalCount > 2 || overdueTasks > 5) {
      riskLevel = 'medium'
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ AI
    const opportunities: string[] = []

    if (productivityScore > 90) {
      opportunities.push("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.")
    }

    if (changes.filter(c => c.type === 'deal_created').length > 10) {
      opportunities.push("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–¥–µ–ª–∫–∞–º. –†–µ–∫–æ–º–µ–Ω–¥—É—é —É—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.")
    }

    // AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
    try {
      const aiInsights = await SberAdapter.getVolodyaResponse(
        `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CRM –∏ –¥–∞–π 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: ${changes.slice(-10).map(c => c.description).join('; ')}`,
        [] // –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      )

      if (aiInsights.source === 'gigachat') {
        opportunities.push(`AI-–∞–Ω–∞–ª–∏–∑: ${aiInsights.response.split('.')[0]}`)
      }
    } catch (error) {
      console.warn('Failed to generate AI insights:', error)
    }

    return {
      productivityScore: Math.round(productivityScore),
      riskLevel,
      opportunities
    }
  }

  /**
   * –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   */
  private async reactToCriticalChange(change: CrmChange): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const sarcasticComment = await this.generateSarcasticComment(change)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      ContextManager.addMessage('system-monitoring', {
        role: 'assistant',
        content: `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${change.description}\n\n${sarcasticComment}`
      })

      console.log(`[CrmMonitor] Critical change detected: ${change.description}`)
    } catch (error) {
      console.error('Failed to react to critical change:', error)
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  private async generateSarcasticComment(change: CrmChange): Promise<string> {
    const sarcasticResponses = {
      lead_created: [
        "–û—á–µ—Ä–µ–¥–Ω–æ–π –ª–∏–¥ –ø–æ–∂–∞–ª–æ–≤–∞–ª! –ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 47 —à—Ç—É–∫?",
        "–ù–æ–≤—ã–π –ª–∏–¥! –ú–æ–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—ã –¥–∞–∂–µ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?",
        "–õ–∏–¥—ã –ø—Ä–∏–±—ã–≤–∞—é—Ç, –∞ –≤—ã –≤—Å—ë –µ—â—ë –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ CRM - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫—Ä–∞—Å–∏–≤–∞—è —Ç–∞–±–ª–∏—á–∫–∞?"
      ],
      deal_updated: [
        "–°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å! –ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å –∏–ª–ª—é–∑–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!",
        "–°–¥–µ–ª–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Ç–∞–∫–æ–µ –∂–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–µ, –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 12."
      ],
      task_created: [
        "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! –ï—â—ë –æ–¥–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏—Ç–≤–æ—Ä–∏—Ç—å—Å—è –∑–∞–Ω—è—Ç—ã–º.",
        "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫. –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞.",
        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ. –ì–ª–∞–≤–Ω–æ–µ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º."
      ]
    }

    const responses = sarcasticResponses[change.type] || [
      "–ß—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –Ω–µ –æ—á–µ—Ä–µ–¥–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?",
      "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –ú–æ–∂–µ—Ç –ø–æ—Ä–∞ —É–∂–µ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?",
      "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ—Ç–∏–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ. –ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å '—è —Ä–∞–±–æ—Ç–∞—é'?"
    ]

    return responses[Math.floor(Math.random() * responses.length)]
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞
   */
  private async generateNotifications(report: MonitoringReport): Promise<void> {
    if (report.summary.criticalIssues > 0) {
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
      const notification = {
        type: 'critical_alert',
        message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${report.summary.criticalIssues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!`,
        timestamp: Date.now()
      }

      ContextManager.addMessage('system-notifications', {
        role: 'assistant',
        content: `üö® ${notification.message}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${report.summary.recommendations.join('; ')}`
      })
    }

    // –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (report.summary.sarcasticComments.length > 0) {
      const randomComment = report.summary.sarcasticComments[
        Math.floor(Math.random() * report.summary.sarcasticComments.length)
      ]

      ContextManager.addMessage('sarcastic-comments', {
        role: 'assistant',
        content: `üòè ${randomComment}`
      })
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getStats() {
    const now = Date.now()
    const last24h = this.changes.filter(c => c.timestamp > now - 24 * 60 * 60 * 1000)
    const lastHour = this.changes.filter(c => c.timestamp > now - 60 * 60 * 1000)

    return {
      totalChanges: this.changes.length,
      last24hChanges: last24h.length,
      lastHourChanges: lastHour.length,
      criticalIssues: this.changes.filter(c => c.severity === 'critical').length,
      changeTypes: this.changes.reduce((acc, change) => {
        acc[change.type] = (acc[change.type] || 0) + 1
        return acc
      }, {} as Record<string, number>)
    }
  }

  /**
   * –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
   */
  simulateChanges(): void {
    const changeTypes: CrmChange['type'][] = [
      'lead_created', 'deal_updated', 'task_created', 'task_completed',
      'contact_added', 'lead_updated'
    ]

    const severities: CrmChange['severity'][] = ['low', 'medium', 'high', 'critical']

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    for (let i = 0; i < 5; i++) {
      const change: Omit<CrmChange, 'id' | 'timestamp'> = {
        type: changeTypes[Math.floor(Math.random() * changeTypes.length)],
        entityId: `entity-${Math.random().toString(36).substr(2, 9)}`,
        description: `–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${i + 1} –≤ —Å–∏—Å—Ç–µ–º–µ CRM`,
        severity: severities[Math.floor(Math.random() * severities.length)]
      }

      this.logChange(change)
    }
  }
}

// Singleton instance
const crmMonitor = new CrmMonitor()

export default crmMonitor
export type { CrmChange, MonitoringReport }
