// Rundex CRM - API –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –í–æ–ª–æ–¥–∏
// –ê–≤—Ç–æ—Ä: MagistrTheOne, 2025

import { NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"
import { prisma } from "@/lib/prisma"
import OpenAI from "openai"

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI (–µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
}) : null

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 })
    }

    const { message, context } = await request.json()

    if (!message) {
      return NextResponse.json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" }, { status: 400 })
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const userData = await getUserCRMData(session.user.email)

    // –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    const response = await generateVolodyaResponse(message, userData, context)

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await prisma.activity.create({
      data: {
        type: "NOTE",
        subject: "–ó–∞–ø—Ä–æ—Å –∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –í–æ–ª–æ–¥–µ",
        description: `–í–æ–ø—Ä–æ—Å: ${message.substring(0, 100)}${message.length > 100 ? '...' : ''}`,
        userId: session.user.email
      }
    })

    return NextResponse.json({
      response: response.content,
      suggestions: response.suggestions,
      data: response.data
    })

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ:", error)
    return NextResponse.json(
      {
        error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
        response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        suggestions: ["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"]
      },
      { status: 500 }
    )
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö CRM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async function getUserCRMData(userId: string) {
  const [
    leads,
    contacts,
    opportunities,
    tasks,
    recentActivities
  ] = await Promise.all([
    prisma.lead.findMany({
      where: { assignedToId: userId },
      take: 50,
      orderBy: { updatedAt: "desc" }
    }),
    prisma.contact.findMany({
      where: { createdById: userId },
      take: 50,
      orderBy: { updatedAt: "desc" }
    }),
    prisma.opportunity.findMany({
      where: { assignedToId: userId },
      include: { products: true },
      take: 30,
      orderBy: { updatedAt: "desc" }
    }),
    prisma.task.findMany({
      where: { assignedToId: userId },
      take: 30,
      orderBy: { updatedAt: "desc" }
    }),
    prisma.activity.findMany({
      where: { userId },
      take: 20,
      orderBy: { createdAt: "desc" }
    })
  ])

  // –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = {
    totalLeads: leads.length,
    newLeads: leads.filter(l => l.status === "NEW").length,
    qualifiedLeads: leads.filter(l => l.status === "QUALIFIED").length,
    totalContacts: contacts.length,
    activeOpportunities: opportunities.filter(o => o.stage !== "CLOSED_WON" && o.stage !== "CLOSED_LOST").length,
    totalRevenue: opportunities
      .filter(o => o.stage === "CLOSED_WON")
      .reduce((sum, o) => sum + o.amount, 0),
    pendingTasks: tasks.filter(t => t.status === "OPEN" || t.status === "IN_PROGRESS").length,
    completedTasks: tasks.filter(t => t.status === "COMPLETED").length
  }

  return {
    leads,
    contacts,
    opportunities,
    tasks,
    activities: recentActivities,
    stats
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –í–æ–ª–æ–¥–∏
async function generateVolodyaResponse(message: string, userData: any, context?: any) {
  const lowerMessage = message.toLowerCase()

  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
  const queryType = analyzeQueryType(lowerMessage)

  let response = ""
  let suggestions: string[] = []
  let data: any = null

  switch (queryType) {
    case "leads_analysis":
      response = generateLeadsAnalysis(userData)
      suggestions = [
        "–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã—Å–æ–∫–æ-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ª–∏–¥—ã",
        "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ª–∏–¥–∞–º–∏",
        "–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤"
      ]
      data = { leads: userData.leads.slice(0, 10) }
      break

    case "sales_performance":
      response = generateSalesAnalysis(userData)
      suggestions = [
        "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
        "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ —ç—Ç–∞–ø–∞–º",
        "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
      ]
      data = { opportunities: userData.opportunities }
      break

    case "tasks_management":
      response = generateTasksAnalysis(userData)
      suggestions = [
        "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º",
        "–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
      ]
      data = { tasks: userData.tasks }
      break

    case "contacts_search":
      response = generateContactsAnalysis(userData)
      suggestions = [
        "–°–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
        "–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
        "–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"
      ]
      data = { contacts: userData.contacts.slice(0, 10) }
      break

    case "statistics_overview":
      response = generateStatsOverview(userData)
      suggestions = [
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –ø–µ—Ä–∏–æ–¥–æ–º",
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
      ]
      data = userData.stats
      break

    default:
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenAI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
      if (openai) {
        try {
          const systemPrompt = `–¢—ã –í–æ–ª–æ–¥—è, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π CRM-—Å–∏—Å—Ç–µ–º–µ Rundex.
          –¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–¥–∞—Ö, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö, –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.
          –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

          –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
          - –õ–∏–¥—ã: ${userData.stats.totalLeads} (–Ω–æ–≤—ã—Ö: ${userData.stats.newLeads})
          - –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${userData.stats.totalContacts}
          - –°–¥–µ–ª–∫–∏: ${userData.stats.activeOpportunities} –∞–∫—Ç–∏–≤–Ω—ã—Ö
          - –ó–∞–¥–∞—á–∏: ${userData.stats.pendingTasks} –≤ —Ä–∞–±–æ—Ç–µ`

          const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
              { role: "system", content: systemPrompt },
              { role: "user", content: message }
            ],
            max_tokens: 500,
            temperature: 0.7
          })

          response = completion.choices[0]?.message?.content || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ OpenAI:", error)
          response = generateFallbackResponse(message, userData)
        }
      } else {
        response = generateFallbackResponse(message, userData)
      }

      suggestions = [
        "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–¥–æ–≤",
        "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"
      ]
  }

  return { content: response, suggestions, data }
}

// –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
function analyzeQueryType(message: string): string {
  if (message.includes("–ª–∏–¥") || message.includes("lead") || message.includes("–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")) {
    return "leads_analysis"
  }
  if (message.includes("–ø—Ä–æ–¥–∞–∂") || message.includes("–≤–æ—Ä–æ–Ω–∫") || message.includes("—Å–¥–µ–ª–∫") || message.includes("–¥–æ—Ö–æ–¥")) {
    return "sales_performance"
  }
  if (message.includes("–∑–∞–¥–∞—á") || message.includes("task") || message.includes("—Ä–∞–±–æ—Ç")) {
    return "tasks_management"
  }
  if (message.includes("–∫–æ–Ω—Ç–∞–∫—Ç") || message.includes("contact") || message.includes("–∫–ª–∏–µ–Ω—Ç")) {
    return "contacts_search"
  }
  if (message.includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫") || message.includes("–∞–Ω–∞–ª–∏–∑") || message.includes("–æ—Ç—á—ë—Ç")) {
    return "statistics_overview"
  }
  return "general"
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
function generateLeadsAnalysis(userData: any): string {
  const { stats, leads } = userData
  const highPriorityLeads = leads.filter((l: any) => l.priority === "HIGH" || l.priority === "URGENT")

  return `–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ª–∏–¥–æ–≤:

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${stats.totalLeads}
‚Ä¢ –ù–æ–≤—ã—Ö: ${stats.newLeads}
‚Ä¢ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.qualifiedLeads}

üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ª–∏–¥—ã:** ${highPriorityLeads.length}
${highPriorityLeads.slice(0, 3).map((lead: any) =>
  `‚Ä¢ ${lead.firstName} ${lead.lastName} (${lead.company || '–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏'}) - ${lead.status}`
).join('\n')}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å ${stats.newLeads} –Ω–æ–≤—ã–º–∏ –ª–∏–¥–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ ${highPriorityLeads.length} –≤—ã—Å–æ–∫–æ-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö`
}

function generateSalesAnalysis(userData: any): string {
  const { stats, opportunities } = userData
  const activeOpps = opportunities.filter((o: any) => o.stage !== "CLOSED_WON" && o.stage !== "CLOSED_LOST")
  const wonOpps = opportunities.filter((o: any) => o.stage === "CLOSED_WON")

  const avgDealSize = wonOpps.length > 0
    ? wonOpps.reduce((sum: number, o: any) => sum + o.amount, 0) / wonOpps.length
    : 0

  return `–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂:

üìà **–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${stats.activeOpportunities}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö —É—Å–ø–µ—à–Ω–æ: ${wonOpps.length}
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.totalRevenue.toLocaleString('ru-RU')} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: ${avgDealSize.toLocaleString('ru-RU')} ‚ÇΩ

üéØ **–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂:**
${activeOpps.slice(0, 3).map((opp: any) =>
  `‚Ä¢ ${opp.name}: ${opp.amount.toLocaleString('ru-RU')} ‚ÇΩ (${opp.stage})`
).join('\n')}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ —ç—Ç–∞–ø–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–¥–µ–ª–∫–∞—Ö —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é >70%`
}

function generateTasksAnalysis(userData: any): string {
  const { stats, tasks } = userData
  const pendingTasks = tasks.filter((t: any) => t.status === "OPEN" || t.status === "IN_PROGRESS")
  const urgentTasks = pendingTasks.filter((t: any) => t.priority === "HIGH" || t.priority === "URGENT")

  return `–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á:

üìã **–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${stats.pendingTasks}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completedTasks}
‚Ä¢ –°—Ä–æ—á–Ω—ã—Ö: ${urgentTasks.length}

‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:**
${urgentTasks.slice(0, 3).map((task: any) =>
  `‚Ä¢ ${task.title} (${task.priority})`
).join('\n')}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç–µ ${urgentTasks.length} —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–æ–π`
}

function generateContactsAnalysis(userData: any): string {
  const { stats, contacts } = userData
  const recentContacts = contacts.slice(0, 5)

  return `–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:

üë• **–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:**
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${stats.totalContacts}
‚Ä¢ –ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${recentContacts.length}

üìç **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:**
${recentContacts.map((contact: any) =>
  `‚Ä¢ ${contact.firstName} ${contact.lastName} (${contact.company || '–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏'})`
).join('\n')}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–∏–∑–∏—Ä—É–π—Ç–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è targeted –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π`
}

function generateStatsOverview(userData: any): string {
  const { stats } = userData

  return `–û–±–∑–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Rundex CRM:

üìä **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ –õ–∏–¥—ã: ${stats.totalLeads} (–Ω–æ–≤—ã—Ö: ${stats.newLeads})
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${stats.totalContacts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${stats.activeOpportunities}
‚Ä¢ –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ: ${stats.pendingTasks}
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.totalRevenue.toLocaleString('ru-RU')} ‚ÇΩ

üìà **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${stats.completedTasks}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤: ${stats.totalLeads > 0 ? Math.round((stats.qualifiedLeads / stats.totalLeads) * 100) : 0}%

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏`
}

function generateFallbackResponse(message: string, userData: any): string {
  return `–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å "${message}", –Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

–£ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ:
‚Ä¢ ${userData.stats.totalLeads} –ª–∏–¥–æ–≤
‚Ä¢ ${userData.stats.totalContacts} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
‚Ä¢ ${userData.stats.activeOpportunities} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ:
‚Ä¢ "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–¥–æ–≤"
‚Ä¢ "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã"
‚Ä¢ "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∑–∞ –º–µ—Å—è—Ü"`
}
