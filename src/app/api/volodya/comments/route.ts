// Rundex CRM - API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –í–æ–ª–æ–¥–∏
// –ê–≤—Ç–æ—Ä: MagistrTheOne, 2025

import { NextRequest, NextResponse } from "next/server"
import { ContextManager } from "@/lib/volodya/contextManager"

export async function GET() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    const sarcasticComments = ContextManager.getContext('sarcastic-comments')
    const systemNotifications = ContextManager.getContext('system-notifications')

    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const allComments = [
      ...sarcasticComments,
      ...systemNotifications
    ].sort((a, b) => b.timestamp - a.timestamp) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)

    return NextResponse.json({
      comments: allComments,
      total: allComments.length,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('Error fetching comments:', error)
    return NextResponse.json(
      { error: 'Failed to fetch comments', comments: [] },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const { action } = await request.json()

    if (action === 'clear') {
      // –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      ContextManager.clearContext('sarcastic-comments')
      ContextManager.clearContext('system-notifications')

      return NextResponse.json({
        success: true,
        message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—á–∏—â–µ–Ω—ã',
        timestamp: new Date().toISOString()
      })
    }

    if (action === 'add_test_comment') {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      ContextManager.addMessage('sarcastic-comments', {
        role: 'assistant',
        content: 'üòè –û–≥–æ, –≤—ã —Ç—É—Ç —Ä–µ—à–∏–ª–∏ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞—Ü–µ–ø–∏–ª–∏?'
      })

      ContextManager.addMessage('system-notifications', {
        role: 'assistant',
        content: 'üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏!'
      })

      return NextResponse.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω',
        timestamp: new Date().toISOString()
      })
    }

    return NextResponse.json(
      { error: 'Unknown action' },
      { status: 400 }
    )
  } catch (error) {
    console.error('Error in comments API:', error)
    return NextResponse.json(
      { error: 'Failed to process action' },
      { status: 500 }
    )
  }
}
